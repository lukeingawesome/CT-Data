name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  schedule:
    # Run tests weekly on Sunday at 00:00 UTC
    - cron: '0 0 * * 0'

env:
  PYTHON_VERSION: '3.9'
  PYTORCH_VERSION: '2.4.1'
  CUDA_VERSION: 'cpu'  # Use CPU for CI/CD

jobs:
  # Code Quality Check
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r test-requirements.txt

    - name: Run Black (code formatting check)
      run: |
        black --check --diff .

    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff .

    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run mypy (type checking)
      run: |
        mypy --install-types --non-interactive --ignore-missing-imports finetune_siglip.py || true

  # Security and Dependency Check
  security:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for security vulnerabilities
      run: |
        safety check || true

    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0

    - name: Install PyTorch (CPU)
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Install project dependencies
      run: |
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Create minimal test data
      run: |
        mkdir -p csv
        python -c "
import pandas as pd
import numpy as np
import os

# Create minimal test dataset
data = {
    'img_path': [f'/fake/image_{i}.nii.gz' for i in range(10)],
    'split': ['train'] * 6 + ['val'] * 4,
    'Medical material': np.random.randint(0, 2, 10),
    'Cardiomegaly': np.random.randint(0, 2, 10),
    'Lung nodule': np.random.randint(0, 2, 10),
    'Pleural effusion': np.random.randint(0, 2, 10)
}

df = pd.DataFrame(data)
df.to_csv('csv/test_data.csv', index=False)
print('Created test CSV with', len(df), 'samples')
        "

    - name: Run unit tests
      run: |
        pytest tests/test_models.py -v --tb=short

    - name: Run data tests
      run: |
        pytest tests/test_data.py -v --tb=short

    - name: Run training tests
      run: |
        pytest tests/test_training.py -v --tb=short

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-integration-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short -m "not slow"

    - name: Generate test coverage report
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || contains(github.event.head_commit.message, '[benchmark]')
    needs: [test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Run performance benchmarks
      run: |
        pytest tests/ -m "slow" --benchmark-only --benchmark-json=benchmark-results.json || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # Documentation Build Test
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme

    - name: Check if documentation can be built
      run: |
        echo "Documentation build test would go here"
        # sphinx-build -b html docs docs/_build || true

  # Docker Build Test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t siglip-ct:test .

    - name: Test Docker container
      run: |
        docker run --rm siglip-ct:test python -c "import torch; print('PyTorch version:', torch.__version__)"

  # Deployment (only on release)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r *.py training/ requirements.txt deployment/
        tar -czf siglip-ct-${{ github.event.release.tag_name }}.tar.gz deployment/

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./siglip-ct-${{ github.event.release.tag_name }}.tar.gz
        asset_name: siglip-ct-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Deploy to production (placeholder)
      run: |
        echo "Deployment steps would go here"
        echo "This could include:"
        echo "- Uploading to cloud storage"
        echo "- Deploying to cloud services"
        echo "- Updating model registry"
        echo "- Sending notifications"

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration-test.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"

    - name: Notify on failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration-test.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs." 